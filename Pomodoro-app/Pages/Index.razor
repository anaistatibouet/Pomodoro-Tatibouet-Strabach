@page "/"
@using System.Threading;
@using Data;
@using System;

<div class="bgPomodoro">

    <div class="card text-center m-auto" style="width: 30vw;">
        <div class="card-header bg-dark text-light">
            <h2>@pomodoroTitle</h2>
            <p class="mb-0">Pomodoro @ActivePomodoro</p>
        </div>
        <div class="card-body">
            <div class="p-2 text-white tag-container m-auto" style="width:20vw">
                <p class="m-0">Projet DotNet</p>
            </div>
            <h1 class="m-4">@timeElapsedString</h1>
            <button class="btn btn-success actiontimer" @onclick="Start"><span class="oi oi-media-play"></span></button>
            <button class="btn btn-danger actiontimer" @onclick="Stop"><span class="oi oi-media-pause"></span></button>
            <button class="btn btn-warning actiontimer" @onclick="Reset"><span class="oi oi-action-undo"></span></button>
            <hr />
            <div class="mt-4">
                <button class="btn btn-outline-dark" @onclick="changeMode"><span class="oi oi-s"></span>Choisir @modeBtn</button>
            </div>
            @if ((t.Seconds < 3) && (isStarted))
            {
                <audio autoplay class="mt-5">
                    <source src="../medias/sounds/sound-end.mp3" type="audio/mpeg">
                </audio>
            }
        </div>
    </div>
</div>

@code {
    public Session currentSession = new Session(7);
    private dynamic currentPomodoro => currentSession.Sequence[currentSession.ActivePomodoro];
    private TimeSpan t { get; set; }
    private double timeElapsed { get; set; }
    private bool breakState;
    private string timeElapsedString { get; set; }
    private string pomodoroTitle;
    private string[] pomodoroState = new string[] { "Travail", "Pause" };
    private string[] mode = new string[] { "mode studieux", "mode flemme" };
    private string startBtn = "Démarrer";
    private string modeBtn;
    private int ActivePomodoro { get; set; }
    private bool lazyMode = false;
    private bool isStarted { get; set; }

    public void Start()
    {
        currentPomodoro.StartPomodoro();
        if (startBtn == "Redémarrer") { startBtn = "Démarrer"; }
        isStarted = true;
    }

    public void Stop()
    {
        currentPomodoro.StopPomodoro();
        startBtn = "Redémarrer";
    }

    public void Reset()
    {
        currentPomodoro.ResetPomodoro();
    }

    public void TimeElapsed()
    {
        timeElapsed = currentPomodoro.TimeElapsed();
        t = TimeSpan.FromMilliseconds(timeElapsed);

        // Affichage du pomodoro avec les minutes et les secondes
        timeElapsedString = string.Format("{0:D2} : {1:D2}", t.Minutes, t.Seconds);

    }

    public int GetActivePomodoro()
    {
        return this.ActivePomodoro = currentSession.ActivePomodoro + 1;
    }

    /// <summary>
    /// Permet de rafraîchir le pomodoro lors de l'initialisation
    /// </summary>
    protected override void OnInitialized()
    {
        isStarted = false;
        var timer = new Timer(new TimerCallback(_ =>
        {
            TimeElapsed();
            GetPomodoroString();
            GetActivePomodoro();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });

        }), null, 1000, 1000);
    }

    /// <summary>
    /// Pour les jours où on n'a pas du tout envie de travailler :)
    /// Pour Benjamin c'est tout le temps !
    /// </summary>
    public void changeMode()
    {
        if (!lazyMode)
        {
            lazyMode = true;
        }
        else
        {
            lazyMode = false;
        }
    }

    public void GetPomodoroString()
    {
        breakState = currentPomodoro.GetBreakState();

        if (lazyMode == false)
        {
            modeBtn = mode[1];

            if (!breakState)
            {
                pomodoroTitle = pomodoroState[0];
            }
            else
            {
                pomodoroTitle = pomodoroState[1];
            }
        }
        else
        {
            modeBtn = mode[0];

            if (!breakState)
            {
                pomodoroTitle = pomodoroState[1];
            }
            else
            {
                pomodoroTitle = pomodoroState[0];
            }
        }
    }
}