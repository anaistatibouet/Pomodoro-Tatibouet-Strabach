@page "/SessionsForm"
@using Model;
@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<EditForm Model="@_sessionModel" OnValidSubmit="addSession">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h2 class="text-center font-weight-bold m-5">
        Sessions
    </h2>
    <div class="formSession m-auto" style="width:30vw">
        <div class="form-group">
            <InputText class="form-control" id="name" @bind-Value="_sessionModel.Name" placeholder="Nom de la session" />
        </div>

        <div class="form-group">
            <label>Nombre de pomodoros</label>
            <InputNumber class="form-control" id="nbPomodoro" @bind-Value="_sessionModel.NbPomodoros" />
        </div>
        <button type="submit" class="btn btn-primary m-auto" style="display:block">Ajouter</button>
    </div>
</EditForm>
<div>
    <img src="../medias/images/kitten.png" alt="kitten" class="kitten-left" />
</div>
<div>
    <p class="@backgroundColor message">@StatusMessage</p>
</div>

@code {

    private SessionModel _sessionModel = new SessionModel();
    private HttpClient http = new HttpClient();
    private string StatusMessage { get; set; }
    private string backgroundColor { get; set; }

    private async Task getNameForm(string currentValue)
    {
        await JSRuntime.InvokeVoidAsync(
            "setElementById",
            "resultJson",
            $"Current name is: {currentValue}"
        );
    }

    private async Task getNbPomodoro(string currentValue)
    {
        await JSRuntime.InvokeVoidAsync(
            "setElementById",
            "resultJson",
            $"Current nb pomodoro is: {currentValue}"
        );
    }

    private async Task addSession()
    {
        var Session = new SessionModel { Name = _sessionModel.Name, NbPomodoros = _sessionModel.NbPomodoros };
        var ApiUri = "https://localhost:44313/api/Sessions";
        var res = await http.PostAsJsonAsync(ApiUri, Session);

        if (res.IsSuccessStatusCode)
        {
            backgroundColor = "bg-success";
            StatusMessage = "Session inséré dans la BDD";
            StateHasChanged();
        }
        else
        {
            backgroundColor = "bg-danger";
            StatusMessage = await res.Content.ReadAsStringAsync();
            StateHasChanged();
        }
    }
}