@page "/Pomodoro/{SessionId:int}"
@using Model;
@using System.Threading;
@using Data;
@using System;
@using System.Diagnostics;

<div class="bgPomodoro">
    <div class="card text-center m-auto" style="width: 30vw;">
        <div class="card-header bg-dark text-light">
            <h2>@pomodoroTitle</h2>
            <p class="mb-0">Pomodoro @ActivePomodoro</p>
        </div>
        <div class="card-body">
            <div class="p-2 text-white tag-container m-auto" style="width:20vw">
                <p class="m-0">@tagName</p>
            </div>
            <h1 class="m-4">@timeElapsedString</h1>
            <button class="btn btn-success actiontimer" @onclick="Start"><span class="oi oi-media-play"></span></button>
            <button class="btn btn-danger actiontimer" @onclick="Stop"><span class="oi oi-media-pause"></span></button>
            <button class="btn btn-warning actiontimer" @onclick="Reset"><span class="oi oi-action-undo"></span></button>
            <hr />
            <div class="mt-4">
                <button class="btn btn-outline-dark" @onclick="changeMode"><span class="oi oi-s"></span>Choisir @modeBtn</button>
            </div>
            @if ((t.Minutes == 0) && (t.Seconds < 3) && (isStarted))
            {
                <audio autoplay class="mt-5">
                    <source src="../medias/sounds/sound-end.mp3" type="audio/mpeg">
                </audio>
            }
        </div>
    </div>
</div>

@code {
    #region Declarations

    [Parameter]
    public int SessionId { get; set; }

    HttpClient Http = new HttpClient();

    private List<PomodoroModel> pomodoroesList = new List<PomodoroModel>();
    private List<TagModel> tagsList = new List<TagModel>();


    private HistoryModel historyModel = new HistoryModel();
    private TagModel TagModel = new TagModel();
    private PomodoroModel PomodoroModel = new PomodoroModel();
    private Session currentSession = new Session();

    private TimeSpan t { get; set; }
    private DateTime pomodoroDate { get; set; }
    private dynamic currentPomodoro => currentSession.Sequence[currentSession.ActivePomodoro];

    private int ActivePomodoro { get; set; }
    private double timeElapsed { get; set; }

    private string timeElapsedString { get; set; }
    private string pomodoroTitle;
    private string[] pomodoroState = new string[] { "Travail", "Pause" };
    private string[] mode = new string[] { "mode studieux", "mode flemme" };
    private string startBtn = "Démarrer";
    private string modeBtn;
    private dynamic tagName => currentSession.Sequence[currentSession.ActivePomodoro].GetTagName();

    private bool lazyMode = false;
    private bool isStarted { get; set; }
    private bool breakState;

    #endregion

    #region API Requests
    //Initialise les Sessions
    public void initSession()
    {
        List<Countdown> sequence = new List<Countdown>();
        pomodoroesList.ForEach(delegate (PomodoroModel pomodoroModel)
        {
            TagModel tag = new TagModel();
            if (this.tagsList.Count > 0)
            {
                tag = this.tagsList.Find(t => t.Id == pomodoroModel.TagId); //On regarde dans le pomodoro actuel si le tag est présent
            }
            else
            {
                tag = (new TagModel { Name = "" }); //Si la tagList est vide, initialise un tag pour l'insérer dans la Session
            }
            sequence.Insert(pomodoroModel.Position, new Countdown(pomodoroModel.Position, this.currentSession, tag.Name));
        });
        this.currentSession.Sequence = sequence;
    }

    // Permet de récupérer les pomodoros de la session choisie
    protected override async Task OnInitializedAsync()
    {
        tagsList = await Http.GetJsonAsync<List<TagModel>>("https://localhost:44313/api/Tags");

        pomodoroesList = await Http.GetJsonAsync<List<PomodoroModel>>($"https://localhost:44313/api/Sessions/{SessionId}/Pomodoroes");
        initSession();
    }

    // Enregistre le pomodoro dans l'historique à la fin du décompte
    public async void addHistory()
    {
        this.pomodoroDate = DateTime.Now;
        var pomodoro = this.pomodoroesList.Find(pomo => pomo.Position == currentSession.ActivePomodoro);
        int tag = (int)pomodoro.TagId;
        var _historyModel = new HistoryModel { Date = this.pomodoroDate, TagId = tag };

        var RequestUri = "https://localhost:44313/api/Histories";
        await Http.PostAsJsonAsync(RequestUri, _historyModel);
    }
    #endregion

    #region Actions pomodoro
    public void Start()
    {
        currentPomodoro.StartPomodoro();
        if (startBtn == "Redémarrer") { startBtn = "Démarrer"; }
        isStarted = true;
    }

    public void Stop()
    {
        currentPomodoro.StopPomodoro();
        startBtn = "Redémarrer";
    }

    public void Reset()
    {
        currentPomodoro.ResetPomodoro();
    }

    /// <summary>
    /// Pour les jours où on n'a pas du tout envie de travailler :)
    /// </summary>
    public void changeMode()
    {
        lazyMode = !lazyMode;
    }
    #endregion

    #region Display
    public void TimeElapsed()
    {
        timeElapsed = currentPomodoro.TimeElapsed();
        t = TimeSpan.FromMilliseconds(timeElapsed);

        // Affichage du pomodoro avec les minutes et les secondes
        timeElapsedString = string.Format("{0:D2} : {1:D2}", t.Minutes, t.Seconds);

        if ((t.Minutes == 0) && (t.Seconds == 0) && (isStarted))
        {
            addHistory();
        }
    }

    // Permet d'afficher le numéro du pomodoro actif
    public int GetActivePomodoro()
    {
        return this.ActivePomodoro = currentSession.ActivePomodoro + 1;
    }

    // Permet d'afficher le titre du pomodoro
    public void GetPomodoroString()
    {
        breakState = currentPomodoro.GetBreakState();

        if (lazyMode == false)
        {
            modeBtn = mode[1];

            pomodoroTitle = breakState ? pomodoroState[1] : pomodoroState[0];
        }
        else
        {
            modeBtn = mode[0];

            pomodoroTitle = breakState ? pomodoroState[0] : pomodoroState[1];
        }
    }


    public void getTagName()
    {
    }
    #endregion

    #region Refresh pomodoro
    /// <summary>
    /// Permet de rafraîchir le pomodoro lors de l'initialisation
    /// </summary>
    protected override void OnInitialized()
    {
        isStarted = false;
        var timer = new Timer(new TimerCallback(_ =>
        {
            TimeElapsed();
            GetPomodoroString();
            GetActivePomodoro();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });

        }), null, 1000, 1000);
    }
    #endregion
}