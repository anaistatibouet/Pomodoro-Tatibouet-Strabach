@page "/TagsModal"
@using Model;
@inject IModalService ModalService

@if (ShowTagForm)
{
    <div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputGroupSelect01">Pomodoro 1</label>
            </div>
            <select class="custom-select" id="inputGroupSelect01">
                <option value="">--please choose an option--</option>
                @foreach (TagModel tag in TagsList)
                {
                    <option value=@tag.Name>@tag.Name</option>
                }
            </select>
        </div>
    </div>

    <button @onclick="SubmitForm" class="btn btn-primary">Valider</button>
    <button @onclick="Cancel" class="btn btn-secondary">Annuler</button>
}
else
{
    <div class="alert alert-success" role="alert">
        Success<br />
        <button class="btn btn-primary" @onclick="@Done">Done</button>
    </div>
}

@code {
    [CascadingParameter] ModalParameters Parameters { get; set; }
    bool ShowTagForm { get; set; } = true;
    private List<TagModel> TagsList = new List<TagModel>();
    HttpClient Http = new HttpClient();

    void SubmitForm()
    {
        ShowTagForm = false;
    }

    void Done()
    {
        ModalService.Close(ModalResult.Ok($"Tag Form was submitted successfully."));
    }

    void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }

    #region Display
    // Requête GET pour afficher les tags et pour afficher les pomodoros
    protected override async Task OnInitializedAsync()
    {
        var ApiUriTags = "https://localhost:44313/api/Tags";
        var ApiUriPomodoros = "https://localhost:44313/api/Pomodoroes";
        TagsList = await Http.GetJsonAsync<List<TagModel>>(ApiUriTags);
    }
    #endregion
}