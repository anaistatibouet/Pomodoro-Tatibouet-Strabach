@page "/TagsModal"
@using Model;
@using System.Diagnostics;
@inject IModalService ModalService

@if (ShowTagForm)
{
    <div>
        <div class="d-inline-block" style="max-height: 50vh; overflow-y:scroll !important;">
            @foreach (PomodoroModel pomodoro in PomodorosList)
            {
                <div class="input-group">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="inputGroupSelect01">Pomodoro @(pomodoro.Position + 1)</label>
                    </div>

                    <select class="custom-select" id="inputGroupSelect01">
                        <option value="">--please choose an option--</option>
                        @foreach (TagModel tag in TagsList)
                        {
                            <option value=@tag.Id>@tag.Name</option>
                        }
                    </select>
                </div>
            }
        </div>
    </div>
    <div class="mt-3">
        <button @onclick="SubmitForm" class="btn btn-primary">Valider</button>
        <button @onclick="Cancel" class="btn btn-secondary">Annuler</button>
    </div>
}
else
{
    <div class="alert alert-success" role="alert">
        Success<br />
        <button class="btn btn-primary" @onclick="@Done">Done</button>
    </div>
}

@code {
    [CascadingParameter] ModalParameters Parameters { get; set; }
    bool ShowTagForm { get; set; } = true;
    private List<TagModel> TagsList = new List<TagModel>();
    private List<PomodoroModel> PomodorosList = new List<PomodoroModel>();
    private SessionModel _sessionModel = new SessionModel();
    private PomodoroModel _pomodoroModel = new PomodoroModel();
    HttpClient Http = new HttpClient();
    int SessionId { get; set; }

    void SubmitForm()
    {
        ShowTagForm = false;
    }

    void Done()
    {
        ModalService.Close(ModalResult.Ok($"Tag Form was submitted successfully."));
    }

    void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }


    #region Display
    // Requête GET pour afficher les tags et pour afficher les pomodoros
    protected override async Task OnInitializedAsync()
    {
        SessionId = Parameters.Get<int>("SessionId");

        var ApiUriTags = "https://localhost:44313/api/Tags";
        var ApiUriPomodoros = $"https://localhost:44313/api/Sessions/{SessionId}/Pomodoroes";
        TagsList = await Http.GetJsonAsync<List<TagModel>>(ApiUriTags);
        PomodorosList = await Http.GetJsonAsync<List<PomodoroModel>>(ApiUriPomodoros);

    }
    #endregion
}